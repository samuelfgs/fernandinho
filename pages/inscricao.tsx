// This is a skeleton starter React page generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import { PageParamsProvider as PageParamsProvider__ } from "@plasmicapp/react-web/lib/host";

import { PlasmicInscricao } from "../components/plasmic/a_d/PlasmicInscricao";
import { useRouter } from "next/router";
import {
  SubmitHandler,
  useForm,
  FormProvider,
  useFormContext,
  Controller,
} from "react-hook-form";
import { ErrorMessage } from "@hookform/error-message";
import Input from "antd/lib/input";
import FormItem from "@/components/FormItem";
import { supabase } from "@/components/supabase/supabase";
import { nanoid } from "nanoid";
import { useState } from "react";

interface Person {
  fullName: string;
  cpf: string;
  telefone: string;
  email: string;
}

const LABEL = {
  fullName: "Nome completo",
  cpf: "Documento de Identidade",
  telefone: "Telefone",
  email: "Email",
};

const ERROR_MESSAGE = {
  fullName: "Preencha o nome completo",
  cpf: "Preencha o documento de identidade (CPF/RG)",
  telefone: "Preencha um telefone valido",
  email: "Preencha um email valido",
};

type InputWithErrorProps = {
  inputName: keyof Person;
};

const InputWithError = ({ inputName }: InputWithErrorProps) => {
  const {
    control,
    formState: { errors },
  } = useFormContext();

  return (
    <FormItem
      input={
        <Controller
          name={inputName}
          control={control}
          rules={{
            required: ERROR_MESSAGE[inputName],
          }}
          render={({ field }) => (
            <Input
              {...field}
              // status={errors[inputName] ? "error" : undefined}
            />
          )}
        />
      }
      label={LABEL[inputName]}
      errorMessage={<ErrorMessage errors={errors} name={inputName} />}
    />
  );
};

const VIP_PRICE = 0.01;
const GERAL_PRICE = 0.02;

function Inscricao() {
  const [vip, setVip] = useState(1);
  const [geral, setGeral] = useState(2);

  const router = useRouter();

  const methods = useForm<Person>({
    defaultValues: {
      fullName: "asd",
      cpf: "bsdq",
      telefone: "casd",
      email: "samuel.fg96@gmail.com"
    }
  });

  const onSubmitHandler: SubmitHandler<Person> = async (newData, e) => {
    console.log("dalex", newData);

    const mercadoPagoId = nanoid()+nanoid();

    const response = await fetch(`${process.env.NEXT_PUBLIC_ENDPOINT}/api/mercadopago/preference`, {
      method: "POST",
      body: JSON.stringify({
        name: newData.fullName,
        email: newData.email,
        id: mercadoPagoId,
        items: [
          {
            id: 0,
            title: "Pista VIP",
            description: "Ingressos Pista VIP para o Fernandinho em ISV - 06 de outubro",
            quantity: vip,
            currency_id: "BRL",
            unit_price: VIP_PRICE
          },
          {
            id: 1,
            title: "Pista Geral",
            description: "Ingressos Pista Geral para o Fernandinho em ISV - 06 de outubro",
            quantity: geral,
            currency_id: "BRL",
            unit_price: GERAL_PRICE
          }
        ]
      })
    });

    const responseJson = await response.json();

    const newRow = await supabase
      .from("inscritos_fernandinho")
      .insert({
        name: newData.fullName,
        cpf: newData.cpf,
        telefone: newData.telefone,
        email: newData.email,
        mercadoPagoId,
        mercadoPagoLink: responseJson.response.init_point,
        ticketAmount: geral + vip,
        ticketTotalPrice: geral * GERAL_PRICE + vip * VIP_PRICE,
        ticketInfo: {
          geral,
          vip,
          geralPrice: GERAL_PRICE,
          vipPrice: VIP_PRICE,
          lote: 1
        }
      })
      .select();

    if (newRow.error || newRow.data.length !== 1) {
      throw new Error(newRow.error?.message ?? "Unknown error");
    }

    console.log("dale", responseJson.response);
    router.push(responseJson.response.init_point)
  };

  const handleMySubmit: React.FormHTMLAttributes<HTMLFormElement>["onSubmit"] =
    (e) => {
      e.preventDefault();
      methods.handleSubmit(onSubmitHandler)(e);
    };

  return (
    <PageParamsProvider__
      route={useRouter()?.pathname}
      params={useRouter()?.query}
      query={useRouter()?.query}
    >
      <FormProvider {...methods}>
        <PlasmicInscricao
          onSubmit={handleMySubmit}
          isLoading={methods.formState.isSubmitting}
          vip={vip}
          geral={geral}
          vipPrice={VIP_PRICE}
          geralPrice={GERAL_PRICE}
          onDecVip={() => setVip(v => v > 0 ? v-1 : v)}
          onDecGeral={() => setGeral(g => g > 0 ? g-1 : g)}
          onIncVip={() => setVip(v => v+1)}
          onIncGeral={() => setGeral(g => g+1)}
          form={
            <>
              <InputWithError inputName="fullName" />
              <InputWithError inputName="cpf" />
              <InputWithError inputName="telefone" />
              <InputWithError inputName="email" />
            </>
          }
        />
      </FormProvider>
    </PageParamsProvider__>
  );
}

export default Inscricao;
