// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: v9K2EjBMfgxWsQ5xC6ATsB
// Component: Yw3tB8Ww6yzi

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: IcxtRwsLDNXC/component
import ResponsiveMenu from "../../ResponsiveMenu"; // plasmic-import: oJ8LfnluUByG/component
import IconHomePageMobile from "../../IconHomePageMobile"; // plasmic-import: k9U4aHFxFE0c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../imported_dep_5/plasmic.module.css"; // plasmic-import: 49wF7zG85s5BmUvuzSq52Y/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../imported_dep_4/plasmic.module.css"; // plasmic-import: hPAx2Po3YSE2fzFsJw5Trv/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: v9K2EjBMfgxWsQ5xC6ATsB/projectcss
import sty from "./PlasmicHomeMobile.module.css"; // plasmic-import: Yw3tB8Ww6yzi/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: sA_PcaHKQ0gG/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: -GsD1lPQfgan/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: HxVuzo9Hw5zX/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: ryE6OeKCPAsC/icon

createPlasmicElementProxy;

export type PlasmicHomeMobile__VariantMembers = {};
export type PlasmicHomeMobile__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomeMobile__VariantsArgs;
export const PlasmicHomeMobile__VariantProps = new Array<VariantPropType>();

export type PlasmicHomeMobile__ArgsType = {};
type ArgPropType = keyof PlasmicHomeMobile__ArgsType;
export const PlasmicHomeMobile__ArgProps = new Array<ArgPropType>();

export type PlasmicHomeMobile__OverridesType = {
  root?: Flex__<"div">;
  responsiveMenu?: Flex__<typeof ResponsiveMenu>;
  link?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultHomeMobileProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomeMobile__RenderFunc(props: {
  variants: PlasmicHomeMobile__VariantsArgs;
  args: PlasmicHomeMobile__ArgsType;
  overrides: PlasmicHomeMobile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__vLeZ3)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__rrwIq)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__mb2GL)}>
            <div className={classNames(projectcss.all, sty.freeBox__oMdod)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uoNcM
                )}
              >
                {"06 de Outubro"}
              </div>
            </div>
            <Button
              className={classNames("__wab_instance", sty.button__ps1KG)}
              color={"yellow"}
              link={`/inscricao`}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__e5Vdn
                )}
              >
                {"QUERO ME INSCREVER"}
              </div>
            </Button>
          </div>
        </Stack__>
        <ResponsiveMenu
          data-plasmic-name={"responsiveMenu"}
          data-plasmic-override={overrides.responsiveMenu}
          className={classNames("__wab_instance", sty.responsiveMenu)}
        />

        <div className={classNames(projectcss.all, sty.freeBox__kMG)}>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__gaXwb)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"500px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/a_d/images/whatsAppImage20240821At223033Jpeg.jpg",
              fullWidth: 1200,
              fullHeight: 1599,
              aspectRatio: undefined
            }}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___6DSyb)}>
          <IconHomePageMobile
            className={classNames(
              "__wab_instance",
              sty.iconHomePageMobile__yBhOu
            )}
            slot={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ozk0M
                )}
              >
                {"06 DE OUT"}
              </div>
            }
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__qrVIn)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/a_d/images/image.png",
                fullWidth: 100,
                fullHeight: 100,
                aspectRatio: undefined
              }}
            />
          </IconHomePageMobile>
          <IconHomePageMobile
            className={classNames(
              "__wab_instance",
              sty.iconHomePageMobile__xVvTj
            )}
            slot={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rh02C
                )}
              >
                {"18:00"}
              </div>
            }
          >
            <Icon2Icon
              className={classNames(projectcss.all, sty.svg__zmheh)}
              role={"img"}
            />
          </IconHomePageMobile>
          <div className={classNames(projectcss.all, sty.freeBox__oRlgZ)}>
            <PlasmicLink__
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(projectcss.all, projectcss.a, sty.link)}
              component={Link}
              href={"https://www.instagram.com/igrejaemsv/"}
              platform={"nextjs"}
            >
              <IconHomePageMobile
                className={classNames(
                  "__wab_instance",
                  sty.iconHomePageMobile__cuazR
                )}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lEmXc
                    )}
                  >
                    {"IGREJA EM \nS\u00c3O VICENTE"}
                  </div>
                }
              >
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__qDqSg)}
                  role={"img"}
                />
              </IconHomePageMobile>
            </PlasmicLink__>
          </div>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__mgorh
          )}
        >
          {"MAPA DE INGRESSOS"}
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__nTtP2)}>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img___8NgVb)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/a_d/images/image4.jpg",
              fullWidth: 934,
              fullHeight: 432,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tqZR
            )}
          >
            {"1\u00ba LOTE"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jt31V
            )}
          >
            {"PISTA VIP: R$ 90,00"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zqoxf
            )}
          >
            {"PISTA GERAL: R$ 70,00"}
          </div>
        </div>
        <Button
          className={classNames("__wab_instance", sty.button__q4Nit)}
          color={"yellow"}
          link={`/inscricao`}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___6U7Bw
            )}
          >
            {"N\u00c3O FIQUE DE FORA!"}
          </div>
        </Button>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__vwi7X)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___8Q6SJ
            )}
          >
            {"ORGANIZA\u00c7\u00c3O"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___6S9KA)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__ciPMv)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/a_d/images/isv.png",
                fullWidth: 1080,
                fullHeight: 1080,
                aspectRatio: undefined
              }}
            />
          </div>
        </Stack__>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "responsiveMenu", "link"],
  responsiveMenu: ["responsiveMenu"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  responsiveMenu: typeof ResponsiveMenu;
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomeMobile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomeMobile__VariantsArgs;
    args?: PlasmicHomeMobile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomeMobile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomeMobile__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomeMobile__ArgProps,
          internalVariantPropNames: PlasmicHomeMobile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomeMobile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomeMobile";
  } else {
    func.displayName = `PlasmicHomeMobile.${nodeName}`;
  }
  return func;
}

export const PlasmicHomeMobile = Object.assign(
  // Top-level PlasmicHomeMobile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    responsiveMenu: makeNodeComponent("responsiveMenu"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicHomeMobile
    internalVariantProps: PlasmicHomeMobile__VariantProps,
    internalArgProps: PlasmicHomeMobile__ArgProps
  }
);

export default PlasmicHomeMobile;
/* prettier-ignore-end */
