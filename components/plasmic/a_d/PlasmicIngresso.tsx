// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: v9K2EjBMfgxWsQ5xC6ATsB
// Component: tkL7NtyLeguy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../imported_dep_5/plasmic.module.css"; // plasmic-import: 49wF7zG85s5BmUvuzSq52Y/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../imported_dep_4/plasmic.module.css"; // plasmic-import: hPAx2Po3YSE2fzFsJw5Trv/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: v9K2EjBMfgxWsQ5xC6ATsB/projectcss
import sty from "./PlasmicIngresso.module.css"; // plasmic-import: tkL7NtyLeguy/css

createPlasmicElementProxy;

export type PlasmicIngresso__VariantMembers = {
  loading: "loading";
};
export type PlasmicIngresso__VariantsArgs = {
  loading?: SingleBooleanChoiceArg<"loading">;
};
type VariantPropType = keyof PlasmicIngresso__VariantsArgs;
export const PlasmicIngresso__VariantProps = new Array<VariantPropType>(
  "loading"
);

export type PlasmicIngresso__ArgsType = {
  nome?: React.ReactNode;
  tipo?: React.ReactNode;
  data?: string;
  horario?: string;
  pessoa?: string;
  loadingSlot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicIngresso__ArgsType;
export const PlasmicIngresso__ArgProps = new Array<ArgPropType>(
  "nome",
  "tipo",
  "data",
  "horario",
  "pessoa",
  "loadingSlot"
);

export type PlasmicIngresso__OverridesType = {
  root?: Flex__<"div">;
  ul?: Flex__<"ul">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultIngressoProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicIngresso__RenderFunc(props: {
  variants: PlasmicIngresso__VariantsArgs;
  args: PlasmicIngresso__ArgsType;
  overrides: PlasmicIngresso__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          data: "05/10",
          horario: "12:08",
          pessoa: "SAMUEL"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "loading",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.loading
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root,
            { [sty.rootloading]: hasVariant($state, "loading", "loading") }
          )}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__eCqN5,
              {
                [sty.textloading__eCqN5Gbn2S]: hasVariant(
                  $state,
                  "loading",
                  "loading"
                )
              }
            )}
          >
            {"TOUR FERNANDINHO"}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__dWgWa, {
              [sty.freeBoxloading__dWgWagbn2S]: hasVariant(
                $state,
                "loading",
                "loading"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: null,
              value: args.loadingSlot
            })}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox___0FFr, {
              [sty.freeBoxloading___0FFrGbn2S]: hasVariant(
                $state,
                "loading",
                "loading"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__aMioa)}>
              <div className={classNames(projectcss.all, sty.freeBox__n4Rt)}>
                {renderPlasmicSlot({
                  defaultContents: "SAMUEL FERREIRA GUIMAR\u00c3ES SANTOS",
                  value: args.nome,
                  className: classNames(sty.slotTargetNome, {
                    [sty.slotTargetNomeloading]: hasVariant(
                      $state,
                      "loading",
                      "loading"
                    )
                  })
                })}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__t19C)}>
              <div className={classNames(projectcss.all, sty.freeBox__rWpk)}>
                {renderPlasmicSlot({
                  defaultContents: "INGRESSO VIP",
                  value: args.tipo
                })}
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__kzbBk, {
                [sty.freeBoxloading__kzbBKgbn2S]: hasVariant(
                  $state,
                  "loading",
                  "loading"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__l1LBo,
                  {
                    [sty.textloading__l1LBOgbn2S]: hasVariant(
                      $state,
                      "loading",
                      "loading"
                    )
                  }
                )}
              >
                <React.Fragment>
                  <React.Fragment>{"CHECK-IN REALIZADO:\n"}</React.Fragment>
                  {
                    <ul
                      data-plasmic-name={"ul"}
                      data-plasmic-override={overrides.ul}
                      className={classNames(
                        projectcss.all,
                        projectcss.ul,
                        sty.ul
                      )}
                    >
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li__tMrlp,
                          {
                            [sty.liloading__tMrlPgbn2S]: hasVariant(
                              $state,
                              "loading",
                              "loading"
                            )
                          }
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $props.data;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "05/10";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </li>
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li__dp1Bz
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $props.horario;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "12:08";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </li>
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li___4BIB,
                          {
                            [sty.liloading___4BIBgbn2S]: hasVariant(
                              $state,
                              "loading",
                              "loading"
                            )
                          }
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $props.pessoa;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "SAMUEL";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </li>
                    </ul>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
            </div>
          </div>
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"200px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/a_d/images/isv.png",
              fullWidth: 1080,
              fullHeight: 1080,
              aspectRatio: undefined
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "ul", "img"],
  ul: ["ul"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  ul: "ul";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIngresso__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicIngresso__VariantsArgs;
    args?: PlasmicIngresso__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicIngresso__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicIngresso__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicIngresso__ArgProps,
          internalVariantPropNames: PlasmicIngresso__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicIngresso__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIngresso";
  } else {
    func.displayName = `PlasmicIngresso.${nodeName}`;
  }
  return func;
}

export const PlasmicIngresso = Object.assign(
  // Top-level PlasmicIngresso renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    ul: makeNodeComponent("ul"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicIngresso
    internalVariantProps: PlasmicIngresso__VariantProps,
    internalArgProps: PlasmicIngresso__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicIngresso;
/* prettier-ignore-end */
