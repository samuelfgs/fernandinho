// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: v9K2EjBMfgxWsQ5xC6ATsB
// Component: cAutWQ1m0bVt

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../imported_dep_5/plasmic.module.css"; // plasmic-import: 49wF7zG85s5BmUvuzSq52Y/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../imported_dep_4/plasmic.module.css"; // plasmic-import: hPAx2Po3YSE2fzFsJw5Trv/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: v9K2EjBMfgxWsQ5xC6ATsB/projectcss
import sty from "./PlasmicHomeDesktopPage2.module.css"; // plasmic-import: cAutWQ1m0bVt/css

createPlasmicElementProxy;

export type PlasmicHomeDesktopPage2__VariantMembers = {};
export type PlasmicHomeDesktopPage2__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomeDesktopPage2__VariantsArgs;
export const PlasmicHomeDesktopPage2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicHomeDesktopPage2__ArgsType = {};
type ArgPropType = keyof PlasmicHomeDesktopPage2__ArgsType;
export const PlasmicHomeDesktopPage2__ArgProps = new Array<ArgPropType>();

export type PlasmicHomeDesktopPage2__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultHomeDesktopPage2Props {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomeDesktopPage2__RenderFunc(props: {
  variants: PlasmicHomeDesktopPage2__VariantsArgs;
  args: PlasmicHomeDesktopPage2__ArgsType;
  overrides: PlasmicHomeDesktopPage2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__jpyPj)}>
        <div className={classNames(projectcss.all, sty.freeBox__pJoeB)}>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__eRn1W)}
            displayHeight={"auto"}
            displayMaxHeight={"70%"}
            displayMaxWidth={"50%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/a_d/images/image8.png",
              fullWidth: 888,
              fullHeight: 1159,
              aspectRatio: undefined
            }}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__c9Kw3)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__zzNtm)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hUm9E
                )}
              >
                {"FERNANDINHO"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__oEoi)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bHoVj
                  )}
                >
                  {
                    'Artista crist\u00e3o de grande relev\u00e2ncia desde os anos 2000\n\nDentre algumas de suas composi\u00e7\u00f5es de maior destaque no cen\u00e1rio gospel nacional, podemos destacar os louvores "Faz Chover", "Uma Nova Hist\u00f3ria" e "Galileu"\n\nRetorna a SV, uma cidade de grande import\u00e2ncia na sua trajet\u00f3ria ministerial. Agora com a turn\u00ea do seu ultimo album "\u00daNICO".'
                  }
                </div>
              </div>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wtm6S)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zPokq
                )}
              >
                {"ORGANIZA\u00c7\u00c3O"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___7TGh5)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__h0O)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"150px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/a_d/images/isv.png",
                    fullWidth: 1080,
                    fullHeight: 1080,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </Stack__>
          </Stack__>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomeDesktopPage2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomeDesktopPage2__VariantsArgs;
    args?: PlasmicHomeDesktopPage2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomeDesktopPage2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomeDesktopPage2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomeDesktopPage2__ArgProps,
          internalVariantPropNames: PlasmicHomeDesktopPage2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomeDesktopPage2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomeDesktopPage2";
  } else {
    func.displayName = `PlasmicHomeDesktopPage2.${nodeName}`;
  }
  return func;
}

export const PlasmicHomeDesktopPage2 = Object.assign(
  // Top-level PlasmicHomeDesktopPage2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicHomeDesktopPage2
    internalVariantProps: PlasmicHomeDesktopPage2__VariantProps,
    internalArgProps: PlasmicHomeDesktopPage2__ArgProps
  }
);

export default PlasmicHomeDesktopPage2;
/* prettier-ignore-end */
