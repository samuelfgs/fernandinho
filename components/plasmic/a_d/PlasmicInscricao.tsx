// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: v9K2EjBMfgxWsQ5xC6ATsB
// Component: 7nKd3J5jkvRy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ResponsiveMenu from "../../ResponsiveMenu"; // plasmic-import: oJ8LfnluUByG/component
import FaleConosco from "../../FaleConosco"; // plasmic-import: i1x7Xze2vbS-/component
import Button from "../../Button"; // plasmic-import: IcxtRwsLDNXC/component
import Loading from "../../Loading"; // plasmic-import: X6m2OMf1r7Nr/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../imported_dep_5/plasmic.module.css"; // plasmic-import: 49wF7zG85s5BmUvuzSq52Y/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../imported_dep_4/plasmic.module.css"; // plasmic-import: hPAx2Po3YSE2fzFsJw5Trv/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: v9K2EjBMfgxWsQ5xC6ATsB/projectcss
import sty from "./PlasmicInscricao.module.css"; // plasmic-import: 7nKd3J5jkvRy/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: sA_PcaHKQ0gG/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: -GsD1lPQfgan/icon

createPlasmicElementProxy;

export type PlasmicInscricao__VariantMembers = {};
export type PlasmicInscricao__VariantsArgs = {};
type VariantPropType = keyof PlasmicInscricao__VariantsArgs;
export const PlasmicInscricao__VariantProps = new Array<VariantPropType>();

export type PlasmicInscricao__ArgsType = {
  vipPrice?: number;
  geralPrice?: number;
  lote?: number;
  form?: React.ReactNode;
  onSubmit?: (event: any) => void;
  isLoading?: boolean;
  onIncVip?: (event: any) => void;
  onDecVip?: (event: any) => void;
  onDecGeral?: (event: any) => void;
  onIncGeral?: (event: any) => void;
  vip?: number;
  geral?: number;
};
type ArgPropType = keyof PlasmicInscricao__ArgsType;
export const PlasmicInscricao__ArgProps = new Array<ArgPropType>(
  "vipPrice",
  "geralPrice",
  "lote",
  "form",
  "onSubmit",
  "isLoading",
  "onIncVip",
  "onDecVip",
  "onDecGeral",
  "onIncGeral",
  "vip",
  "geral"
);

export type PlasmicInscricao__OverridesType = {
  root?: Flex__<"div">;
  responsiveMenu?: Flex__<typeof ResponsiveMenu>;
  img?: Flex__<typeof PlasmicImg__>;
  faleConosco?: Flex__<typeof FaleConosco>;
  step0?: Flex__<"div">;
  form?: Flex__<"form">;
  step1?: Flex__<"div">;
  submitBtn?: Flex__<typeof Button>;
  loading?: Flex__<typeof Loading>;
};

export interface DefaultInscricaoProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInscricao__RenderFunc(props: {
  variants: PlasmicInscricao__VariantsArgs;
  args: PlasmicInscricao__ArgsType;
  overrides: PlasmicInscricao__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          vipPrice: 90,
          geralPrice: 70,
          lote: 1,
          isLoading: false,
          vip: 0,
          geral: 0
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "step",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__uYdUe)}>
            <ResponsiveMenu
              data-plasmic-name={"responsiveMenu"}
              data-plasmic-override={overrides.responsiveMenu}
              className={classNames("__wab_instance", sty.responsiveMenu)}
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ujmyI)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__p1Pb5
                )}
              >
                {"Inscri\u00e7\u00e3o"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___3ToL)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vnNwF
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <span
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.span__fh8Vh
                        )}
                      >
                        {"ATEN\u00c7\u00c3O"}
                      </span>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mBR
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "A data final da venda do 2\u00ba Lote vai at\u00e9 30/09/2024 ou at\u00e9 esgotar a quantidade de vagas do 2\u00ba lote.\n\nEnt\u00e3o n\u00e3o perca a oportunidade de comprar o seu ingresso com desconto nesse 2\u00ba Lote.\n\nValor do Ingresso para o evento:\nPista VIP: ESGOTADO \nPista Geral: R$ 70,00 "
                      }
                    </React.Fragment>
                    {
                      <span
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.span__y41Zs
                        )}
                      >
                        {"R$ 140,00"}
                      </span>
                    }
                    <React.Fragment>
                      {
                        "\n\n1\u00ba Lote: ESGOTADO\n2\u00ba Lote: A PARTIR DE 01/09/2024"
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"500px"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/a_d/images/image4.jpg",
                    fullWidth: 934,
                    fullHeight: 432,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lokS
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <span
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.span___7MCMk
                        )}
                      >
                        {"*"}
                      </span>
                    }
                    <React.Fragment>
                      {
                        "N\u00e3o haver\u00e1 cadeira no dia do evento para ambas as pistas"
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
                <FaleConosco
                  data-plasmic-name={"faleConosco"}
                  data-plasmic-override={overrides.faleConosco}
                  className={classNames("__wab_instance", sty.faleConosco)}
                />
              </Stack__>
              {(() => {
                try {
                  return $state.step === 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"step0"}
                  data-plasmic-override={overrides.step0}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.step0)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kiuCx)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xIqdv
                      )}
                    >
                      {"Pista VIP"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox___84Lg)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__o1KmR
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return "ESGOTADO";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wMv1B)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ofGpJ
                      )}
                    >
                      {"Pista Geral"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vyvvK
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return "ESGOTADO";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qMQaH)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sd7Wc
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return `R$ ${$props.geralPrice.toLocaleString(
                                "fr",
                                {
                                  minimumFractionDigits: 2,
                                  maximumFractionDigits: 2
                                }
                              )}`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__aqJWe
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__bw6Sm
                          )}
                          onClick={args.onDecGeral}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vQeUv
                            )}
                          >
                            {"-"}
                          </div>
                        </Button>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lnVxh
                          )}
                        >
                          <React.Fragment>{$props.geral}</React.Fragment>
                        </div>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__sA6Sa
                          )}
                          onClick={args.onIncGeral}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fvgt8
                            )}
                          >
                            {"+"}
                          </div>
                        </Button>
                      </Stack__>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rv87I)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__suEas
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return `Total: R$ ${(
                              $props.vipPrice * $props.vip +
                              $props.geralPrice * $props.geral
                            ).toLocaleString("fr", {
                              minimumFractionDigits: 2,
                              maximumFractionDigits: 2
                            })}`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__kJIv)}
                    isDisabled={(() => {
                      try {
                        return $props.geral + $props.vip === 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStep"] =
                        $props.geral + $props.vip > 0
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["step"]
                                },
                                operation: 2
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue + 1);
                                return oldValue + 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateStep"] != null &&
                        typeof $steps["updateStep"] === "object" &&
                        typeof $steps["updateStep"].then === "function"
                      ) {
                        $steps["updateStep"] = await $steps["updateStep"];
                      }
                    }}
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gXdLj
                      )}
                    >
                      {"Pr\u00f3ximo"}
                    </div>
                  </Button>
                </Stack__>
              ) : null}
              <form
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                className={classNames(projectcss.all, sty.form)}
                onSubmit={args.onSubmit}
              >
                {(() => {
                  try {
                    return $state.step === 1;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"step1"}
                    data-plasmic-override={overrides.step1}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.step1)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xvgox
                      )}
                    >
                      {"Formul\u00e1rio"}
                    </div>
                    {renderPlasmicSlot({
                      defaultContents: null,
                      value: args.form
                    })}
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___95LJe
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8Ssdw
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return `Pista VIP: ${$props.vip}`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__scITp
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return `Pista Geral: ${$props.geral}`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__szuF6
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return `Total: R$ ${(
                                $props.geralPrice * $props.geral +
                                $props.vipPrice * $props.vip
                              ).toLocaleString("fr", {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2
                              })}`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__aSi5)}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__sWm0O
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 3
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue - 1
                                  );
                                  return oldValue - 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }
                        }}
                        submitsForm={false}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sct8K
                          )}
                        >
                          {"Editar"}
                        </div>
                      </Button>
                      <Button
                        data-plasmic-name={"submitBtn"}
                        data-plasmic-override={overrides.submitBtn}
                        className={classNames("__wab_instance", sty.submitBtn)}
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yMkXu
                          )}
                        >
                          {"Finalizar"}
                        </div>
                      </Button>
                    </Stack__>
                  </Stack__>
                ) : null}
              </form>
            </Stack__>
            {(() => {
              try {
                return $props.isLoading;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Loading
                data-plasmic-name={"loading"}
                data-plasmic-override={overrides.loading}
                className={classNames("__wab_instance", sty.loading)}
              />
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "responsiveMenu",
    "img",
    "faleConosco",
    "step0",
    "form",
    "step1",
    "submitBtn",
    "loading"
  ],
  responsiveMenu: ["responsiveMenu"],
  img: ["img"],
  faleConosco: ["faleConosco"],
  step0: ["step0"],
  form: ["form", "step1", "submitBtn"],
  step1: ["step1", "submitBtn"],
  submitBtn: ["submitBtn"],
  loading: ["loading"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  responsiveMenu: typeof ResponsiveMenu;
  img: typeof PlasmicImg__;
  faleConosco: typeof FaleConosco;
  step0: "div";
  form: "form";
  step1: "div";
  submitBtn: typeof Button;
  loading: typeof Loading;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInscricao__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInscricao__VariantsArgs;
    args?: PlasmicInscricao__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInscricao__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicInscricao__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInscricao__ArgProps,
          internalVariantPropNames: PlasmicInscricao__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInscricao__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInscricao";
  } else {
    func.displayName = `PlasmicInscricao.${nodeName}`;
  }
  return func;
}

export const PlasmicInscricao = Object.assign(
  // Top-level PlasmicInscricao renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    responsiveMenu: makeNodeComponent("responsiveMenu"),
    img: makeNodeComponent("img"),
    faleConosco: makeNodeComponent("faleConosco"),
    step0: makeNodeComponent("step0"),
    form: makeNodeComponent("form"),
    step1: makeNodeComponent("step1"),
    submitBtn: makeNodeComponent("submitBtn"),
    loading: makeNodeComponent("loading"),

    // Metadata about props expected for PlasmicInscricao
    internalVariantProps: PlasmicInscricao__VariantProps,
    internalArgProps: PlasmicInscricao__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInscricao;
/* prettier-ignore-end */
