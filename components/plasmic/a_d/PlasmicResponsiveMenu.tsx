// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: v9K2EjBMfgxWsQ5xC6ATsB
// Component: oJ8LfnluUByG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantseJWteQlTxDUf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: eJWteQLTxDUf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../imported_dep_5/plasmic.module.css"; // plasmic-import: 49wF7zG85s5BmUvuzSq52Y/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../imported_dep_4/plasmic.module.css"; // plasmic-import: hPAx2Po3YSE2fzFsJw5Trv/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: v9K2EjBMfgxWsQ5xC6ATsB/projectcss
import sty from "./PlasmicResponsiveMenu.module.css"; // plasmic-import: oJ8LfnluUByG/css

import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: E8-Exrb7bRQi/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: 6sJCsyR27j0O/icon

createPlasmicElementProxy;

export type PlasmicResponsiveMenu__VariantMembers = {
  isOpen2: "isOpen2";
};
export type PlasmicResponsiveMenu__VariantsArgs = {
  isOpen2?: SingleBooleanChoiceArg<"isOpen2">;
};
type VariantPropType = keyof PlasmicResponsiveMenu__VariantsArgs;
export const PlasmicResponsiveMenu__VariantProps = new Array<VariantPropType>(
  "isOpen2"
);

export type PlasmicResponsiveMenu__ArgsType = {};
type ArgPropType = keyof PlasmicResponsiveMenu__ArgsType;
export const PlasmicResponsiveMenu__ArgProps = new Array<ArgPropType>();

export type PlasmicResponsiveMenu__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultResponsiveMenuProps {
  isOpen2?: SingleBooleanChoiceArg<"isOpen2">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicResponsiveMenu__RenderFunc(props: {
  variants: PlasmicResponsiveMenu__VariantsArgs;
  args: PlasmicResponsiveMenu__ArgsType;
  overrides: PlasmicResponsiveMenu__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isOpen2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isOpen2
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseJWteQlTxDUf()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root,
        { [sty.rootisOpen2]: hasVariant($state, "isOpen2", "isOpen2") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__on2VV, {
          [sty.freeBoxisOpen2__on2VVdZjGv]: hasVariant(
            $state,
            "isOpen2",
            "isOpen2"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__zvqF7, {
            [sty.freeBoxisOpen2__zvqF7DZjGv]: hasVariant(
              $state,
              "isOpen2",
              "isOpen2"
            )
          })}
        >
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__npcTs
            )}
            component={Link}
            platform={"nextjs"}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__teKWi)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"75px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/a_d/images/image5.png",
                fullWidth: 1080,
                fullHeight: 1080,
                aspectRatio: undefined
              }}
            />
          </PlasmicLink__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__vaKpF, {
              [sty.freeBoxisOpen2__vaKpFdZjGv]: hasVariant(
                $state,
                "isOpen2",
                "isOpen2"
              )
            })}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__nw5Lv
              )}
              component={Link}
              platform={"nextjs"}
            >
              {"Fa\u00e7a sua inscri\u00e7\u00e3o"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___0848T
              )}
              component={Link}
              platform={"nextjs"}
            >
              {"Confer\u00eancia"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__y00B2
              )}
              component={Link}
              platform={"nextjs"}
            >
              {"Palestrantes"}
            </PlasmicLink__>
          </Stack__>
          <PlasmicIcon__
            PlasmicIconType={
              hasVariant($state, "isOpen2", "isOpen2") ? Icon6Icon : Icon5Icon
            }
            className={classNames(projectcss.all, sty.svg__be1R, {
              [sty.svgisOpen2__be1RdZjGv]: hasVariant(
                $state,
                "isOpen2",
                "isOpen2"
              )
            })}
            role={"img"}
          />
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__gSFrz, {
            [sty.freeBoxisOpen2__gSFrzdZjGv]: hasVariant(
              $state,
              "isOpen2",
              "isOpen2"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__aP1G, {
              [sty.freeBoxisOpen2__aP1GdZjGv]: hasVariant(
                $state,
                "isOpen2",
                "isOpen2"
              )
            })}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___56Gyo
              )}
              component={Link}
              platform={"nextjs"}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__s5Nnr)}
                displayHeight={"50px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"50px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/a_d/images/image5.png",
                  fullWidth: 1080,
                  fullHeight: 1080,
                  aspectRatio: undefined
                }}
              />
            </PlasmicLink__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__cSnL, {
                [sty.freeBoxisOpen2__cSnLdZjGv]: hasVariant(
                  $state,
                  "isOpen2",
                  "isOpen2"
                )
              })}
            >
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__t3Oh
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Fa\u00e7a sua inscri\u00e7\u00e3o"}
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__nxksb
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Palestrantes"}
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__xgcS3
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Fale conosco"}
              </PlasmicLink__>
            </Stack__>
            <PlasmicIcon__
              PlasmicIconType={
                hasVariant($state, "isOpen2", "isOpen2") ? Icon6Icon : Icon5Icon
              }
              className={classNames(projectcss.all, sty.svg___2Y42F, {
                [sty.svgisOpen2___2Y42FdZjGv]: hasVariant(
                  $state,
                  "isOpen2",
                  "isOpen2"
                )
              })}
              role={"img"}
            />
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__lfcCt, {
              [sty.freeBoxisOpen2__lfcCTdZjGv]: hasVariant(
                $state,
                "isOpen2",
                "isOpen2"
              )
            })}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__uoBc9
              )}
              component={Link}
              platform={"nextjs"}
            >
              {"Fa\u00e7a sua inscri\u00e7\u00e3o"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__bfUjt,
                {
                  [sty.linkisOpen2__bfUjtdZjGv]: hasVariant(
                    $state,
                    "isOpen2",
                    "isOpen2"
                  )
                }
              )}
              component={Link}
              platform={"nextjs"}
            >
              {"Confer\u00eancia"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__vmr0A,
                {
                  [sty.linkisOpen2__vmr0AdZjGv]: hasVariant(
                    $state,
                    "isOpen2",
                    "isOpen2"
                  )
                }
              )}
              component={Link}
              platform={"nextjs"}
            >
              {"Palestrantes"}
            </PlasmicLink__>
          </Stack__>
        </Stack__>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicResponsiveMenu__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicResponsiveMenu__VariantsArgs;
    args?: PlasmicResponsiveMenu__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicResponsiveMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicResponsiveMenu__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicResponsiveMenu__ArgProps,
          internalVariantPropNames: PlasmicResponsiveMenu__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicResponsiveMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicResponsiveMenu";
  } else {
    func.displayName = `PlasmicResponsiveMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicResponsiveMenu = Object.assign(
  // Top-level PlasmicResponsiveMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicResponsiveMenu
    internalVariantProps: PlasmicResponsiveMenu__VariantProps,
    internalArgProps: PlasmicResponsiveMenu__ArgProps
  }
);

export default PlasmicResponsiveMenu;
/* prettier-ignore-end */
