// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: v9K2EjBMfgxWsQ5xC6ATsB
// Component: GJxuAGuODDwD

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import IconHomePageDesktop from "../../IconHomePageDesktop"; // plasmic-import: mCYYW9UKukDq/component
import Button from "../../Button"; // plasmic-import: IcxtRwsLDNXC/component

import { useScreenVariants as useScreenVariantseJWteQlTxDUf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: eJWteQLTxDUf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../imported_dep_5/plasmic.module.css"; // plasmic-import: 49wF7zG85s5BmUvuzSq52Y/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../imported_dep_4/plasmic.module.css"; // plasmic-import: hPAx2Po3YSE2fzFsJw5Trv/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: v9K2EjBMfgxWsQ5xC6ATsB/projectcss
import sty from "./PlasmicHomeDesktopPage1.module.css"; // plasmic-import: GJxuAGuODDwD/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: ryE6OeKCPAsC/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: HxVuzo9Hw5zX/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: sA_PcaHKQ0gG/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: -GsD1lPQfgan/icon

createPlasmicElementProxy;

export type PlasmicHomeDesktopPage1__VariantMembers = {};
export type PlasmicHomeDesktopPage1__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomeDesktopPage1__VariantsArgs;
export const PlasmicHomeDesktopPage1__VariantProps =
  new Array<VariantPropType>();

export type PlasmicHomeDesktopPage1__ArgsType = {};
type ArgPropType = keyof PlasmicHomeDesktopPage1__ArgsType;
export const PlasmicHomeDesktopPage1__ArgProps = new Array<ArgPropType>();

export type PlasmicHomeDesktopPage1__OverridesType = {
  root?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultHomeDesktopPage1Props {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomeDesktopPage1__RenderFunc(props: {
  variants: PlasmicHomeDesktopPage1__VariantsArgs;
  args: PlasmicHomeDesktopPage1__ArgsType;
  overrides: PlasmicHomeDesktopPage1__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseJWteQlTxDUf()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__rkIO)}>
        <div className={classNames(projectcss.all, sty.freeBox__oydj9)}>
          <div className={classNames(projectcss.all, sty.freeBox__uNiXp)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6SZ6P
              )}
            >
              {"FERNANDINHO"}
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xztse)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__o39Dg,
                  "unicoFont"
                )}
              >
                {"EM S\u00c3O VICENTE"}
              </div>
            </Stack__>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__v7HBj)}
          >
            <IconHomePageDesktop
              className={classNames(
                "__wab_instance",
                sty.iconHomePageDesktop__ekW6
              )}
              slot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__riUoo
                  )}
                >
                  {hasVariant(globalVariants, "screen", "tablet")
                    ? "06 DE OUTUBRO"
                    : "06 DE OUT"}
                </div>
              }
            />

            <PlasmicLink__
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(projectcss.all, projectcss.a, sty.link)}
              component={Link}
              href={"https://www.instagram.com/igrejaemsv/"}
              platform={"nextjs"}
            >
              <IconHomePageDesktop
                className={classNames(
                  "__wab_instance",
                  sty.iconHomePageDesktop__cuDv6
                )}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hkmtF
                    )}
                  >
                    {"IGREJA EM\nS\u00c3O VICENTE"}
                  </div>
                }
              >
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___8UrXs)}
                  role={"img"}
                />
              </IconHomePageDesktop>
            </PlasmicLink__>
            <IconHomePageDesktop
              className={classNames(
                "__wab_instance",
                sty.iconHomePageDesktop__bSaVo
              )}
              slot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ydeyh
                  )}
                >
                  {"18:00"}
                </div>
              }
            >
              <Icon2Icon
                className={classNames(projectcss.all, sty.svg___1XgTv)}
                role={"img"}
              />
            </IconHomePageDesktop>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__nmBea)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gQgJo)}
            >
              <Button
                className={classNames("__wab_instance", sty.button__u0KnT)}
                color={"yellow"}
                link={`/inscricao`}
                shape={"sharp"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vzZv7
                  )}
                >
                  {"INSCREVA-SE"}
                </div>
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button___5BGde)}
                color={"softYellow"}
                link={"#ingressos"}
                shape={"sharp"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mLmwz
                  )}
                >
                  {"SAIBA MAIS"}
                </div>
              </Button>
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__tMfHr)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={
                hasVariant(globalVariants, "screen", "tablet") ? "50%" : "auto"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/a_d/images/image2.png",
                fullWidth: 348,
                fullHeight: 408,
                aspectRatio: undefined
              }}
            />
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "img"],
  link: ["link"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomeDesktopPage1__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomeDesktopPage1__VariantsArgs;
    args?: PlasmicHomeDesktopPage1__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomeDesktopPage1__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomeDesktopPage1__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomeDesktopPage1__ArgProps,
          internalVariantPropNames: PlasmicHomeDesktopPage1__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomeDesktopPage1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomeDesktopPage1";
  } else {
    func.displayName = `PlasmicHomeDesktopPage1.${nodeName}`;
  }
  return func;
}

export const PlasmicHomeDesktopPage1 = Object.assign(
  // Top-level PlasmicHomeDesktopPage1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicHomeDesktopPage1
    internalVariantProps: PlasmicHomeDesktopPage1__VariantProps,
    internalArgProps: PlasmicHomeDesktopPage1__ArgProps
  }
);

export default PlasmicHomeDesktopPage1;
/* prettier-ignore-end */
