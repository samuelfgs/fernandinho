// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: v9K2EjBMfgxWsQ5xC6ATsB
// Component: CGqfazUoAy5y

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../imported_dep_5/plasmic.module.css"; // plasmic-import: 49wF7zG85s5BmUvuzSq52Y/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../imported_dep_4/plasmic.module.css"; // plasmic-import: hPAx2Po3YSE2fzFsJw5Trv/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: v9K2EjBMfgxWsQ5xC6ATsB/projectcss
import sty from "./PlasmicStatus.module.css"; // plasmic-import: CGqfazUoAy5y/css

createPlasmicElementProxy;

export type PlasmicStatus__VariantMembers = {};
export type PlasmicStatus__VariantsArgs = {};
type VariantPropType = keyof PlasmicStatus__VariantsArgs;
export const PlasmicStatus__VariantProps = new Array<VariantPropType>();

export type PlasmicStatus__ArgsType = {
  incorrect?: boolean;
  vipIn?: React.ReactNode;
  geralIn?: React.ReactNode;
  vipOut?: React.ReactNode;
  geralOut?: React.ReactNode;
};
type ArgPropType = keyof PlasmicStatus__ArgsType;
export const PlasmicStatus__ArgProps = new Array<ArgPropType>(
  "incorrect",
  "vipIn",
  "geralIn",
  "vipOut",
  "geralOut"
);

export type PlasmicStatus__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultStatusProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStatus__RenderFunc(props: {
  variants: PlasmicStatus__VariantsArgs;
  args: PlasmicStatus__ArgsType;
  overrides: PlasmicStatus__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          incorrect: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rdH4E
            )}
          >
            {"ISV FERNANDINHO"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__fydRs)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___2Oy3C)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/a_d/images/loading.png",
                fullWidth: 300,
                fullHeight: 300,
                aspectRatio: undefined
              }}
            />
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__aaerc)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vxnnV
              )}
            >
              {"CHECK-IN REALIZADOS"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__ae9Wp)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kZBiT)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aWdk3
                  )}
                >
                  {"VIP"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__qeDDy)}>
                  {renderPlasmicSlot({
                    defaultContents: "200",
                    value: args.vipIn,
                    className: classNames(sty.slotTargetVipIn)
                  })}
                </div>
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__dDcGs)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tk0Wz)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ooo2A
                    )}
                  >
                    {"GERAL"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__r1Bg0)}
                  >
                    {renderPlasmicSlot({
                      defaultContents: "200",
                      value: args.geralIn,
                      className: classNames(sty.slotTargetGeralIn)
                    })}
                  </div>
                </Stack__>
              </div>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___2VZ2E)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yoyfy
              )}
            >
              {"RESTANTE"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__sju5N)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vIDsL)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nqh9M
                  )}
                >
                  {"VIP"}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___2TChC)}
                >
                  {renderPlasmicSlot({
                    defaultContents: "200",
                    value: args.vipOut,
                    className: classNames(sty.slotTargetVipOut)
                  })}
                </div>
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__dC2Ih)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___9Suvg)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xy7Ju
                    )}
                  >
                    {"GERAL"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hrz6G)}
                  >
                    {renderPlasmicSlot({
                      defaultContents: "200",
                      value: args.geralOut,
                      className: classNames(sty.slotTargetGeralOut)
                    })}
                  </div>
                </Stack__>
              </div>
            </div>
          </Stack__>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__iYnHy)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"200px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/a_d/images/isv.png",
              fullWidth: 1080,
              fullHeight: 1080,
              aspectRatio: undefined
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStatus__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStatus__VariantsArgs;
    args?: PlasmicStatus__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStatus__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicStatus__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStatus__ArgProps,
          internalVariantPropNames: PlasmicStatus__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStatus__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStatus";
  } else {
    func.displayName = `PlasmicStatus.${nodeName}`;
  }
  return func;
}

export const PlasmicStatus = Object.assign(
  // Top-level PlasmicStatus renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicStatus
    internalVariantProps: PlasmicStatus__VariantProps,
    internalArgProps: PlasmicStatus__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicStatus;
/* prettier-ignore-end */
